/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gov.gsa.faas.tools.formapikeys;

import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

public class FormApiKeysApp {

    /**
     * Connect to the rest endpoint at apiPath using authToken and returns a
     * JsonNode object parsed from the json returned from the rest call
     * 
     * @param apiPath   the full path to a json rest endpoint
     * @param authToken the x-token value to be provided in the header to
     *                  authenticate to the json rest endpoint
     * @return JsonNode a JsonNode object representing the json parsed from the rest
     *         endpoint
     * @throws InterruptedException
     * @throws IOException
     * @throws URISyntaxException
     */
    public JsonNode connectAndParse(String apiPath, String authToken)
            throws IOException, InterruptedException, URISyntaxException {

        OkHttpClient client = new OkHttpClient();

        Request request = new Request.Builder()
            .header("x-token", authToken)
            .url(apiPath)
            .build();

        Response response = client.newCall(request).execute();

        // read json into JsonNode using Jackson ObjectMapper
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = null;
        rootNode = mapper.readTree(response.body().string());

        return rootNode;
    }

    /**
     * Returns a formatted string. For each form definition page, the page number
     * and title is displayed under which is listed the API Key name for each
     * component on that page. If components are within another form type (like a
     * field set), they will be indented to show the relationship.
     * 
     * @param jsonNodeRoot the root json node of a Form.io form definition
     * @return String the formatted api Key string
     * @throws URISyntaxException
     * @throws InterruptedException
     * @throws IOException
     */
    public String getApiKeys(JsonNode jsonNodeRoot) throws IOException, InterruptedException, URISyntaxException {

        String outputText = "";
        outputText = outputText.concat("Form Title: " + jsonNodeRoot.get("title").asText() + "\n");
        outputText = outputText.concat("Last Modified: " + jsonNodeRoot.get("modified").asText() + "\n");

        ArrayNode pagesNode = (ArrayNode) jsonNodeRoot.get("components");

        // for each page
        for (int pageNum = 0; pageNum < pagesNode.size(); pageNum++) {
            JsonNode pageNode = pagesNode.get(pageNum);
            String pageTitle = pageNode.get("title").asText();
            outputText = outputText.concat("\nPage " + (pageNum + 1) + ": " + pageTitle + "\n");
            outputText = outputText
                    .concat("\t" + "* " + pageNode.get("key").asText() + "\t\t" + pageNode.get("type").asText() + "\n");

            ArrayNode panelComponentsNode = (ArrayNode) pageNode.get("components");
            if (panelComponentsNode != null) {
                outputText = outputText.concat(processComponents(panelComponentsNode, "\t\t"));
            }
        }

        return outputText + "\n";
    }

    /**
     * A recursive function that formats a form definition json node. Formatting
     * ceases when a node does not contain any further components.
     * 
     * @param componentsNode the node to format
     * @param tab            the indention to be used when writing out the form
     *                       definition api keys
     * @return String the formatted api Key string
     */
    String processComponents(ArrayNode componentsNode, String tab) {

        String componentOutput = "";
        for (int componentNum = 0; componentNum < componentsNode.size(); componentNum++) {
            JsonNode componentNode = componentsNode.get(componentNum);
            componentOutput = componentOutput.concat(
                    tab + "* " + componentNode.get("key").asText() + "\t\t" + componentNode.get("type").asText() + "\n");
            ArrayNode componentComponentsNode = (ArrayNode) componentNode.get("components");
            if (componentComponentsNode != null) {
                componentOutput = componentOutput.concat(processComponents(componentComponentsNode, tab + "\t"));
            }
        }

        return componentOutput;
    }

    /**
     * Writes the outputString to the outputFilename
     * 
     * @param outputString   string to write to file
     * @param outputFilename full path to the file where the outputString should be
     *                       written
     * @throws IOException
     */
    public void writeKeyOutput(String outputString, String outputFilename) throws IOException {
        FileWriter myWriter = new FileWriter(outputFilename);
        myWriter.write(outputString);
        myWriter.close();
    }

    /**
     * Writes formatted information to a file. For each form definition page, the
     * page number and title is displayed under which is listed the API Key name for
     * each component on that page. If components are within another form type (like
     * a field set), they will be indented to show the relationship.
     * 
     * @param args Three arguments are required:
     *             <ol>
     *             <li>API Path: The full path to the Form.io form definition json
     *             path</li>
     *             <li>Auth Token: The x-token value to be provided in the header to
     *             authenticate to the Form.io form definition json rest server</li>
     *             <li>Output Filename: The full path to the file where the API Keys
     *             for the above form defintion should be written</li>
     *             </ol>
     */
    public static void main(String[] args) {
        if (args==null || args.length != 3) {
            System.out.println("Three arguments are required.\n"
                    + "API Path: The full path to the Form.io form definition json path \n"
                    + "Auth Token: The x-token value to be provided in the header to authenticate to the Form.io form definition json rest server \n"
                    + "Output Filename: The full path to the file where the API Keys for the above form definition should be written \n");
        } else {
            String apiPath = args[0];
            String authToken = args[1];
            String outputFilename = args[2];
            FormApiKeysApp apiKeysApp = new FormApiKeysApp();
            try {
                JsonNode parsedFormDefintion = apiKeysApp.connectAndParse(apiPath, authToken);
                String apiKeyOutput = apiKeysApp.getApiKeys(parsedFormDefintion);
                apiKeysApp.writeKeyOutput(apiKeyOutput, outputFilename);
                System.out.println("Successfully wrote the form definition json API keys defined within {" + apiPath
                        + "} to the {" + outputFilename + "} file.");
            } catch (IOException | InterruptedException | URISyntaxException e) {
                System.out.println("Unable to write the form definition json API keys defined within {" + apiPath
                        + "} to the {" + outputFilename + "} file.");
                e.printStackTrace();
            }
        }
    }

}
